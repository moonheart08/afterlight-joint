using Content.Client._AL.UI.Widgets;
using Content.Client._AL.UI.Widgets.Smart;
using Robust.Client.AutoGenerated;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface.XAML;
using Robust.Shared;
using Robust.Shared.Configuration;

namespace Content.Client._AL.UI.Windows.OptionsMenu.Tabs;

[GenerateTypedNameReferences]
// ReSharper disable once InconsistentNaming
public sealed partial class ALUITab : VGrowStack
{
    [Dependency] private readonly IResourceCache _cache = default!;

    public ALUITab()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        StyleConfigGroup.OnModified += UpdateTestPane;

    }

    protected override void EnteredTree()
    {
        base.EnteredTree();
        StyleConfigGroup.Set = ALStyleConfig.FromCVars();
        UICVarsGroup.Set = UICVarsConfig.FromCVars();
    }

    public void Apply()
    {
        var cfg = (ALStyleConfig) StyleConfigGroup.Set;
        var cfg2 = (UICVarsConfig) UICVarsGroup.Set;
        cfg.ToCVars();
        cfg2.ToCVars();
    }

    private void UpdateTestPane()
    {
        TestPane.Stylesheet = new ALStyle(_cache, (ALStyleConfig)StyleConfigGroup.Set).Stylesheet;
    }

}


// ReSharper disable once InconsistentNaming
public sealed class UICVarsConfig : IFieldSet
{
    public UIScale Scale;

    public static UICVarsConfig FromCVars()
    {
        var cfg = IoCManager.Resolve<IConfigurationManager>();
        return new UICVarsConfig()
        {
            Scale = cfg.GetCVar(CVars.DisplayUIScale).AsUIScale() ?? UIScale.ScaleAuto,
        };
    }

    public void ToCVars()
    {
        var cfg = IoCManager.Resolve<IConfigurationManager>();
        cfg.SetCVar(CVars.DisplayUIScale, Scale.AsFloat());
    }

    public object? ReadField(string fieldName)
    {
        return fieldName switch
        {
            nameof(Scale) => Scale,
            _ => null,
        };
    }

    public bool WriteField(string fieldName, object value)
    {
        object? discard = fieldName switch
        {
            nameof(Scale) => Scale = (UIScale)value,
            _ => null,
        };

        return discard != null;
    }
}

public enum UIScale
{
    ScaleAuto,
    Scale50,
    Scale75,
    Scale100,
    Scale125,
    Scale150,
    Scale175,
    Scale200,
    Scale225,
    Scale250,
    Scale275,
    Scale300
}

public static class UIScaleExtensions
{
    public static float AsFloat(this UIScale scale)
    {
        if (scale == UIScale.ScaleAuto)
            return 0;
        return (((int) scale) * 0.25f) + 0.25f;
    }

    public static UIScale? AsUIScale(this float scale)
    {
        var v = (scale / 0.25f);
        if (v == 0)
            return UIScale.ScaleAuto;

        return (UIScale) (int)float.Floor(v - 1);
    }
}
